;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; SET pin 0 should be mapped to your LED GPIO

.program selecter
    set y,      0b1111  ; y   = ... 00000000 00001111
    in  y,      4       ; isr = ... 00000000 00001111
    set y,      0b0111  ; y   = ... 00000000 00000111
    in  y,      4       ; isr = ... 00000000 11110111
    in  null,   (32-8)  ; isr = 11110111 00000000...
    mov y,      isr     ; y   = 11110111 00000000...
.wrap_target
    in  null,   32
    in  pins,   2
    mov x,      isr     ; x   = ... 000000 CS_A CS_B
    mov osr,    y       ; osr = 11110111 00000000...
repeat:                 ; shift osr x+1 to left
    out null,   1
    jmp x--     repeat  
    out pins,   4       ; set CS pins to e.g. 1101
.wrap                   ; jmp to wrap_target 


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
void selecter_program_init(PIO pio, uint sm, uint offset, uint pin_in, uint pin_out) {
    for (int i=0;i<4; i++)
        pio_gpio_init(pio, pin_out + i);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_out, 4, true);

    pio_sm_config c = selecter_program_get_default_config(offset);

    sm_config_set_in_pins(&c, pin_in);
    sm_config_set_out_pins(&c, pin_out, 4);
    sm_config_set_set_pins(&c, pin_out, 4);

    sm_config_set_in_shift(&c, false, false, 32); // left, no autopush, 32
    sm_config_set_out_shift(&c, false, false, 32); // left, no autopush, 32

    pio_sm_init(pio, sm, offset, &c);
    }
%}
